#summary Documentation to build the Gerardus project
#labels Phase-Deploy

<wiki:toc max_depth="2" />

= Introduction =

Gerardus contains Matlab function that can be run directly without building any code. There are also C++ programs and C++ MEX files that need to be compiled and installed before they can be run. These instructions explain how to that.

After building and installing Gerardus, you should have the command line programs and Matlab MEX functions listed below.

Command line programs (file names given following the linux convention. In Windows, executables have the extension `.exe`):

 * `gerardus/programs/`
  * `extractVoxelCoordinatesFromSegmentationMask`
  * `padSegmentationMaskWithVoxels`
  * `resize3DImage`
  * `rigidRegistration2D`
  * `rotate3DImage`
  * `skeletonize3DSegmentation`
  * `vesselness3DImage`

Matlab MEX functions (file names given following the linux 64 bit convention. In linux 32 bit and Windows 32/64 bit the extension is different):

 * `gerardus/matlab/`
  * `ThirdPartyToolbox/dijkstra.mexa64`
  * `ItkToolbox/itk_pstransform.mexa64`
  * `ItkToolbox/itk_imfilter.mexa64`
  * `FiltersToolbox/bwregiongrow.mexa64`
  * `FiltersToolbox/im2imat.mexa64`
  * `PointsToolbox/sparse_breakdown.mexa64`
  * `PointsToolbox/mba_surface_interpolation.mexa64`

= Requirements (Linux and Windows) =

== Summary ==

 * Subversion client
 * CMake
 * Insight Toolkit
 * Boost C++ libraries
 * Matlab
 * Gerardus

== In detail ==

 * [http://subversion.apache.org/ Subversion client]
  # Download and install the subversion package appropriate for your operating system
  * Note for Linux users: Subversion is probably packaged for your distribution. For example, Ubuntu users can install it doing
{{{
$ sudo apt-get install subversion
}}}
  * Note for Windows users: A popular choice for Windows users is the [http://tortoisesvn.net/downloads.html TortoiseSVN client]
  * Note for other users: See the [http://subversion.apache.org/packages.html subversion package download page] for more options
 * [http://www.cmake.org/ CMake] (Gerardus tested with version 2.8)
  # Download and install CMake for your system (Linux, Windows, MacOS X, etc). 
  * Note for Linux users: CMake is probably packaged for your distribution. For example, Ubuntu users can install it doing
{{{
$ sudo apt-get install cmake
}}}
  * Note for Windows users: Download and run the Win32 Installer from the [http://www.cmake.org/cmake/resources/software.html CMake downloads page]
  * Note for other users: See the [http://www.cmake.org/cmake/resources/software.html CMake resources page] for more options
 * [http://www.itk.org/itkindex.html Insight Toolkit] (Gerardus tested with version 3.20.1)
  # [http://www.itk.org/ITK/resources/software.html Download the Insight Toolkit (ITK)]
  # Build and install ITK using CMake (see the [http://www.itk.org/ItkSoftwareGuide.pdf ITK Software Guide] for details)
  * Note for everyone: You need to set the following variables in your CMake build of ITK
{{{
CMAKE_BUILD_TYPE   Release
BUILD_SHARED_LIBS  ON
ITK_USE_REVIEW     ON
ITK_LEGACY_REMOVE  ON
ITK_USE_OPTIMIZED_REGISTRATION_METHODS ON
}}}
   * Linux users can do this with flags when running cmake, e.g.
{{{
$ cmake -DBUILD_SHARED_LIBS=ON -DITK_USE_REVIEW=ON \
-DCMAKE_BUILD_TYPE=Release -DITK_LEGACY_REMOVE=ON \
-DITK_USE_OPTIMIZED_REGISTRATION_METHODS=ON ..
}}}
   * Windows users can do this checking the "Advanced" box in the CMake interface, and then checking the `ITK_USE_REVIEW`, `ITK_LEGACY_REMOVE` and `ITK_USE_OPTIMIZED_REGISTRATION_METHODS` entries. If using Visual Studio, then the `CMAKE_BUILD_TYPE` entry will be ignored anyway, because Visual Studio is a multi-configuration sytem
  * Note for Windows users: It's important to select "Release" instead of "Debug" from the pull-down configuration menu above the Solution Explorer. This will enable to build and install the Release version of ITK, which will then be needed by the Release build of Gerardus
  * Note for Windows users: Click on "Start" -> "My computer" -> "View system information", and in the "Advanced" tab click on "Environment Variables". Select the System variable `Path`, and click "Edit". Add the path to the `ITKCOMMON.DLL` library, e.g. "C:\Program Files\ITK\bin"
 * [http://www.boost.org/ Boost C++ libraries], development version (Gerardus tested with v1.46 for linux and v1.47 for Windows)
  * Note for Linux users: You can install the boost libraries with e.g.
{{{
$ sudo apt-get install libboost1.46-all-dev
}}}
  * Note for Windows users: Use the [http://www.boostpro.com/download/ installer from BoostPro], !BoostPro 1.47.0 Installer (205K .exe) as of this writing.
  * Note for all users: For those users who need to save space, note that in fact, only the `filesystem` and `system` components of the Boost Libraries are required
 * [http://www.mathworks.com/products/matlab/ Matlab]
  # Matlab has its own installer for each operating system (Linux, Windows, MacOS X, etc)
  * Note for Windows users: Similarly to the previous step, add to the `Path` environment variable the path to your Matlab `LIBMEX.DLL` and `LIBMX.DLL` libraries, e.g. "C:\Program Files\MATLAB\R2010b\bin\win32" (32 bit) or "C:\Program Files\MATLAB\R2010b\bin\win64" (64 bit)
 * [http://code.google.com/p/gerardus/ Gerardus]
  # Check out the Gerardus project code
  * Note for Linux users: You can check out the latest version of the code from the command line doing
{{{
$ svn co http://gerardus.googlecode.com/svn/trunk/ gerardus
}}}
  * Note for Windows users: If you are using a graphic interface like TortoiseSVN, choose "Checkout" from the menu options, and enter `http://gerardus.googlecode.com/svn/trunk/` as the repository's URL. Name the destination folder `gerardus`

= Build and install =

== Instructions for Linux users ==

 # Run from the command line the following code. If everything works, this will create and install the corresponding MEX files to directory `gerardus/matlab/ItkToolkit` with an extension appropriate to the architecture, e.g.
  * `itk_pstransform.mexa64`, `itk_imfilter.mexa64` (Linux 64-bit)
  * `itk_pstransform.mexw32`, `itk_imfilter.mexw32` (Windows 32-bit)
{{{
$ cd gerardus
$ mkdir bin
$ cd bin
$ cmake ..
$ make
$ make install
}}}
 # Add `gerardus/matlab/ItkToolkit` to the Matlab path

== Instructions for Windows users ==

 # Open file `gerardus\CMakeLists.txt` with your CMake program
 # Click on the "Configure" button. Specify the generator for this project (the one I have tested is "Visual Studio 10" with "Use default native compilers")
 # Click on the "Generate" button
 # Open file `gerardus\bin\GERARDUS_MATLAB.sln` with your development environment (e.g. Visual Studio 10)
 # Select "Release" from the configuration pull-down menu abive the Solution Explorer, instead of "Debug"
 # Select "Build -> Build Solution" from the menu.
 # In the "Solution Explorer", right click on "INSTALL" and select "Build". This will install the DLLs that correspond to the compiled MEX files