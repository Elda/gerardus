#summary Documentation to build the Gerardus project
#labels Phase-Deploy

<wiki:toc max_depth="2" />

= How difficult is to use Gerardus? =

If you just need pure Matlab functions, it's as easy as downloading the code and adding everything in `gerardus/matlab` to your Matlab path.

If you want to use also the Matlab MEX functions and C++ programs, then you need to also install ITK and run Gerardus' CMake build process (details below).

== Warning for Windows users ==

The latest version of Gerardus doesn't build in Windows. 

The reason is that two of its third-party dependencies, the [http://gmplib.org/ GMP] and [http://www.mpfr.org/ MPFR] libraries, do not provide a way to build them on Windows.

So until we sort that out, the Gerardus build system will throw the following error for Windows:

{{{
"CMake Error at cpp/src/CMakeLists.txt:110 (message):
  GMP and MPFR build not implemented for Windows. "
}}}

As discussed in this thread, it shouldn't be difficult to [https://groups.google.com/d/msg/gerardus-users/cG380JkS7mo/tN82_FFfgYIJ make GMP and MPFR build on Windows].

 "This is not so difficult. Gerardus would build on Windows if it weren't for the GMP and MPFR libraries. We don't even need them to be built with CMake, or built within Gerardus, for that matter. We could just provide the .lib files for 32 and 64 bit if somebody builds them.

 There are a couple of websites with CMake files for those libraries, maybe older versions.

 http://www.cs.nyu.edu/exact/core/gmp/

 http://gladman.plushost.co.uk/oldsite/computing/gmp4win.php


 The question is whether it's worth spending time on this. My personal incentive is very low, as I don't really use Windows. I'm willing to help an actual Windows user who wants to make it work, but I don't think it's a good use of time toiling in the off-chance that a hypothetical Windows user may want to give it a try one day ;)"



= Introduction =

Gerardus contains Matlab function that can be run directly without building any code. There are also C++ programs and C++ MEX files that need to be compiled and installed before they can be run. These instructions explain how to that.

After building and installing Gerardus, you should have the command line programs and Matlab MEX functions listed below.

Command line programs (file names given following the linux convention. In Windows, executables have the extension `.exe`):

 * `gerardus/programs/`
  * `extractVoxelCoordinatesFromSegmentationMask`
  * `padSegmentationMaskWithVoxels`
  * `resize3DImage`
  * `rigidRegistration2D`
  * `rotate3DImage`
  * `skeletonize3DSegmentation`
  * `vesselness3DImage`

Matlab MEX functions (file names given following the linux 64 bit convention. In linux 32 bit, Windows 32/64 bit and Mac 32/64 bitthe extension is different):

 * `gerardus/matlab/`
  * `ThirdPartyToolbox/dijkstra.mexa64`
  * `ItkToolbox/itk_pstransform.mexa64`
  * `ItkToolbox/itk_imfilter.mexa64`
  * `FiltersToolbox/bwregiongrow.mexa64`
  * `FiltersToolbox/im2imat.mexa64`
  * `PointsToolbox/sparse_breakdown.mexa64`
  * `PointsToolbox/mba_surface_interpolation.mexa64`

= Requirements (Linux, Windows and Mac) =

== Summary ==

 * Subversion client
 * C++ compiler
 * CMake (currently tested with v2.8)
 * m4
 * Insight Toolkit (currently tested with v3.4.1)
 * Matlab
 * Gerardus

== In detail ==

 * [http://subversion.apache.org/ Subversion client]
  # Download and install the subversion package appropriate for your operating system
  * Note for Linux users: Subversion is probably packaged for your distribution. For example, Ubuntu users can install it doing
{{{
$ sudo apt-get install subversion
}}}
  * Note for Windows users: A popular choice for Windows users is the [http://tortoisesvn.net/downloads.html TortoiseSVN client]
  * Note for Mac users: You have a choice of installing a graphical front-end such as [http://code.google.com/p/svnx/ Svnx] or using subversion from the command-line. The command-line tools are installed with Xcode and can be found in the following directory:
{{{
/Applications/Xcode.app/Contents/Developer/usr/bin
}}} 
  * Note for other users: See the [http://subversion.apache.org/packages.html subversion package download page] for more options
 * C++ Compiler
   * Linux users will probably already have g++ installed. If not, e.g. Ubuntu users can install it with
{{{
$ sudo apt-get install g++
}}}
   * Mac users can install [https://developer.apple.com/xcode/ Xcode] free from Apple's App Store. This includes gcc and Subversion. After installing Xcode you need to install the command-line tools - to do this open the preferences window in Xcode (start Xcode, open the Xcode menu and choose Preferences). Then click the Downloads tab and click the install button next to the `Command Line Tools` in the Components list.
   * For windows users, [http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express Visual C++ Express] is available free from Microsoft and includes C++ compilers.
 * [http://www.cmake.org/ CMake] (Gerardus requires version >= 2.8.8)
  # Download and install CMake for your system (Linux, Windows, MacOS X, etc). 
  * Note for Linux users: CMake is probably packaged for your distribution. Ubuntu packages CMake 2.8.6 in Precise Pangolin (12.04), so it's necessary to install cmake 2.8.9 from the upcoming Quantal Quetzal (12.10). This can be done by replacing `precise` by `quantal` in `/etc/apt/sources.list`, then running
{{{
$ sudo apt-get update
$ sudo apt-get install cmake
}}}
   Then undo the edit and run again
{{{
$ sudo apt-get update
}}}
  * Note for Windows users: Download and run the Win32 Installer from the [http://www.cmake.org/cmake/resources/software.html CMake downloads page]
  * Note for Mac users: Download and run the Mac OSX 64/32-bit Universal Installer from the [http://www.cmake.org/cmake/resources/software.html CMake downloads page]
  * Note for other users: See the [http://www.cmake.org/cmake/resources/software.html CMake resources page] for more options
 * [http://www.gnu.org/software/m4/ m4] (GNU M4 is an implementation of the traditional Unix macro processor)
  # It's a small program, simply download and install it
   * Note for Linux users: In Ubuntu, it can be easily installed doing
{{{
$ sudo apt-get install m4
}}}
 * [http://www.itk.org/itkindex.html Insight Toolkit] (Gerardus tested with version 4.2.0)
  # [http://www.itk.org/ITK/resources/software.html Download the Insight Toolkit (ITK)]
  # Build and install ITK using CMake (see the [http://www.itk.org/ItkSoftwareGuide.pdf ITK Software Guide] for details)
  * Note for MacOS X users: [http://worldwidepenguin.com/2010/05/how-to-install-itk-on-a-mac-cmake-macports/ this site] has instructions for building ITK using the CMake application (although they forget to mention that you click "Generate" at the end)
  * Note for everyone: You need to set the following variables in your CMake build of ITK
{{{
CMAKE_BUILD_TYPE   Release (this one ignored by Windows)
BUILD_SHARED_LIBS  ON
ITK_USE_REVIEW     ON
ITK_LEGACY_REMOVE  ON
}}}
  * Note for everyone: You can also untick the following variables to save time, as Gerardus does not need the ITK examples, documentation or tests
{{{
BUILD_DOCUMENTATION   OFF
BUILD_EXAMPLES        OFF
BUILD_TESTING         OFF
}}}
  * Note for everyone: ITK needs to be compiled with the same version of the compiler used for Matlab. This can be ensured setting the following CMake variables (e.g. [http://www.mathworks.com/support/compilers/R2012a Matlab2012a for Linux requires gcc 4.4])
{{{
CMAKE_C_COMPILER gcc-4.4
CMAKE_CXX_COMPILER g++-4.4
}}}
   * Linux and MacOSX users can do this with flags when running cmake, e.g.
{{{
$ cmake -DBUILD_SHARED_LIBS=ON -DITK_USE_REVIEW=ON \
-DCMAKE_BUILD_TYPE=Release -DITK_LEGACY_REMOVE=ON \
-DCMAKE_C_COMPILER=/usr/bin/gcc-4.4 \
-DCMAKE_CXX_COMPILER=/usr/bin/g++-4.4  ..
}}}
   * Windows users can do this checking the "Advanced" box in the CMake interface, and then checking the `ITK_USE_REVIEW` and `ITK_LEGACY_REMOVE`. If using Visual Studio, then the `CMAKE_BUILD_TYPE` entry will be ignored anyway, because Visual Studio is a multi-configuration sytem
  * Notes for Windows users:
   * You need to run Visual Studio as Administrator to install ITK
   * The ITK folder must be close to the root directory C:/>, because sometimes ITK gives compilation problems in Windows if the paths to files are very long strings
   * It's important to select "Release" instead of "Debug" from the pull-down configuration menu above the Solution Explorer. This will enable to build and install the Release version of ITK, which will then be needed by the Release build of Gerardus
   * Click on "Start" -> "My computer" -> "View system information", and in the "Advanced" tab click on "Environment Variables". Select the System variable `Path`, and click "Edit". Add the path to the `ITKCOMMON.DLL` library, e.g. "C:\Program Files\ITK\bin"
 * [http://www.mathworks.com/products/matlab/ Matlab]
  # Matlab has its own installer for each operating system (Linux, Windows, MacOS X, etc)
  * Note for Linux / MacOS X users: Ensure the matlab binary is in the system path. For example, you can add a symlink from a directory already in the path. Assuming your `matlab` binary is in `/opt/matlab/bin/`, then
{{{
$ cd /usr/local/sbin
$ sudo link -s /opt/matlab/bin/matlab
}}}
  * Note for Windows users: Similarly to the previous step, add to the `Path` environment variable the path to your Matlab `LIBMEX.DLL` and `LIBMX.DLL` libraries, e.g. "C:\Program Files\MATLAB\R2010b\bin\win32" (32 bit) or "C:\Program Files\MATLAB\R2010b\bin\win64" (64 bit)
 * [http://code.google.com/p/gerardus/ Gerardus]
  # Check out the Gerardus project code
  * Note for Linux and Mac users: If you are not going to commit any code back, you can check out the latest version of the code from the command line doing
{{{
$ svn co http://gerardus.googlecode.com/svn/trunk/ gerardus
}}}
    If you are going to commit code, then you will need to use `https` instead of `http`
{{{
$ svn co https://gerardus.googlecode.com/svn/trunk/ gerardus
}}}
  * Note for Windows and Mac users: If you are using a graphic interface like TortoiseSVN, choose "Checkout" from the menu options, and enter `https://gerardus.googlecode.com/svn/trunk/` (commiters) or `http://gerardus.googlecode.com/svn/trunk/` (read only) as the repository's URL. Name the destination folder `gerardus`

= Build and install =

== Instructions for Linux and Mac users ==

 # Run from the command line the following code. If everything works, this will create and install the corresponding MEX files to directory `gerardus/matlab/ItkToolkit` with an extension appropriate to the architecture, e.g.
  * `itk_pstransform.mexa64`, `itk_imfilter.mexa64` (Linux 64-bit)
  * `itk_pstransform.mexw32`, `itk_imfilter.mexw32` (Windows 32-bit)
  * `itk_pstransform.mexmac`, `itk_imfilter.mexmaci` (Mac 32-bit Intel)
  * `itk_pstransform.mexmaci64`, `itk_imfilter.mexmaci64` (Mac 64-bit Intel)
{{{
$ cd gerardus
$ mkdir bin
$ cd bin
$ cmake ..
$ cmake ..
$ make
$ make install
}}}
 Note: `cmake` has to be run twice, as this is a requirement of the boost libraries.
 # Add `gerardus/matlab/ItkToolkit` to the Matlab path

== Instructions for Windows users ==

 # Open file `gerardus\CMakeLists.txt` with your CMake program
 # Click on the "Configure" button. Specify the generator for this project (the one I have tested is "Visual Studio 10" with "Use default native compilers")
 # Click on the "Generate" button
 # Open file `gerardus\bin\GERARDUS_MATLAB.sln` with your development environment (e.g. Visual Studio 10)
 # Select "Release" from the configuration pull-down menu abive the Solution Explorer, instead of "Debug"
 # Select "Build -> Build Solution" from the menu.
 # In the "Solution Explorer", right click on "INSTALL" and select "Build". This will install the DLLs that correspond to the compiled MEX files

= Only for developers =

= Integrating the Boost C++ libraries in gerardus =

 # Go to the C++ third-party directory
{{{
$ cd cpp/src/third-party
}}}
 # Download the source code of the [https://svn.boost.org/trac/boost/wiki/CMakeModularizationStatus#CMakeSupport CMake-fied Boost project]
{{{
$ git clone http://github.com/ryppl/boost-zero boost
$ cd boost
$ git submodule update --init
}}}
 # Delete git metadata, and documentation and test directories
{{{
$ find . -name ".git*" | xargs rm -rf
$ find . -name doc | xargs rm -rf
$ find . -name test | grep -v './boost/test$' | xargs rm -rf
}}}
 # Add the remaining files to Gerardus' subversion repository
{{{
$ svn add ../boost
}}}
 # Create a test file with the commit message, e.g. `boost/svn-commit.txt`
{{{
2012-09-04  Ramon Casero  <rcasero@gmail.com>

	* Add cpp/src/third-party/boost:

	- CMake-fied Boost C++ libraries downloaded from

	https://github.com/ryppl/boost-zero

	See details in

	http://code.google.com/p/gerardus/wiki/BuildInstructions#Integrating_the_Boost_C++_libraries_in_gerardus
}}}
 # Start committing directories to the repository. We have to do this in smaller commits, because Google Code won't accept a large commit
{{{
$ svn ci --force-log --file svn-commit.txt -N .
$ svn ci --force-log --file svn-commit.txt build.cmake CMakeLists.txt LICENSE_1_0.txt ryppl
$ svn ci --force-log --file svn-commit.txt -N boost
$ for i in {a..z}; do svn ci --force-log --file svn-commit.txt boost/$i*; done
}}}
 # Comment out doc and test subdirectories from each module's CMakeLists.txt
{{{
$ find . -name CMakeLists.txt | xargs sed -i 's/ryppl_add_doc_subdirectory(doc)/#ryppl_add_doc_subdirectory(doc)/'
$ find . -name CMakeLists.txt | xargs sed -i 's/ryppl_add_test_subdirectory(test)/#ryppl_add_test_subdirectory(test)/'
}}}
 # Fix small bug in `cpp/src/third-party/boost/boost/thread/src/pthread/thread.cpp`
{{{
#include <../src/pthread/timeconv.inl>
}}}
 # Fix small bug in `cpp/src/third-party/boost/boost/inspect/inspect.cpp`. Comment out the paragraph
{{{
  if ( deprecated_ck )
      inspectors.push_back( inspector_element( new boost::inspect::deprecated_macro_check ) );
}}}
 # Build and install Boost separately. This creates, amongst other files and directories, an `include/boost` directory with the header files. Delete all the `.svn` directories, and move this `boost` directory to `gerardus/include`, so that the header files are available to the rest of Gerardus
 # Comment out all Boost modules that we don't need for Gerardus
{{{
$ sed -i 's/^add_subdirectory/#add_subdirectory/' CMakeLists.txt
$ sed -i 's/#add_subdirectory(boost\/config)/add_subdirectory(boost\/config)/' CMakeLists.txt
$ sed -i 's/#add_subdirectory(boost\/date_time)/add_subdirectory(boost\/date_time)/' CMakeLists.txt
$ sed -i 's/#add_subdirectory(boost\/filesystem)/add_subdirectory(boost\/filesystem)/' CMakeLists.txt
$ sed -i 's/#add_subdirectory(boost\/system)/add_subdirectory(boost\/system)/' CMakeLists.txt
$ sed -i 's/#add_subdirectory(boost\/thread)/add_subdirectory(boost\/thread)/' CMakeLists.txt
$ sed -i 's/#add_subdirectory(boost\/chrono)/add_subdirectory(boost\/chrono)/' CMakeLists.txt
}}}
 # Comment out all the `ryppl_export()` blocks in the `CMakeLists.txt` to prevent `make install` from filling `gerardus/lib` with all the files we just saw above when we build Gerardus
{{{
$ find . -name CMakeLists.txt | xargs sed -i '/ryppl_export/,/)/s/.*/# &/'
}}}
  * If in some case we need to uncomment the `ryppl_export()` blocks, run
{{{
$ find . -name CMakeLists.txt | xargs sed -i '/# ryppl_export/,/)/s/^# \(.*\)/\1/g'
}}}
 # We have removed all the boost targets, so now we need to create them manually. Add to the `CMakeLists.txt` of every Boost module that Gerardus needs (`system`, `filesystem`, `thread`) something like
{{{
# install compiled libraries
if(WIN32)
  install(TARGETS
    boost_system
    RUNTIME ARCHIVE
    DESTINATION ${GERARDUS_SOURCE_DIR}/lib)
else(WIN32)
  install(TARGETS
    boost_system
    LIBRARY ARCHIVE
    DESTINATION ${GERARDUS_SOURCE_DIR}/lib)
endif(WIN32)
}}}