#summary Documentation to build the Gerardus project
#labels Phase-Deploy

<wiki:toc max_depth="2" />

= Quickstart =

If you just need pure Matlab functions, it's as easy as downloading the code with Subversion (instructions [https://code.google.com/p/gerardus/source/checkout here]) and then running from Matlab the script `gerardus/matlab/add_gerardus_paths.m` to add the Gerardus toolboxes to your Matlab path.

If you want to use also the Matlab MEX functions and C++ programs, then you need to also build and/or install some dependencies and run Gerardus' CMake build process (instructions below).

[https://code.google.com/p/gerardus/source/browse/?r=1176#svn%2Ftags%2Frelease-0.9.0 Gerardus release 0.9.0] builds on Linux 64 bit and Windows 64 bit (Visual Studio 2010). Mac OSX does not build out-of-the-box, although Tom Doel is looking into it.

= Build and/or install dependencies =

== Summary ==

 * Subversion client
 * C++ compiler
 * CMake (currently tested with v2.8)
 * m4
 * Insight Toolkit (currently tested with v4.3.1)
 * Matlab (currently tested with R2012a)

== In detail ==

 * [http://subversion.apache.org/ Subversion client]
  # Download and install the subversion package appropriate for your operating system
  * Note for Linux users: Subversion is probably packaged for your distribution. For example, Ubuntu users can install it doing
{{{
$ sudo apt-get install subversion
}}}
  * Note for Windows users: A popular choice for Windows users is the [http://tortoisesvn.net/downloads.html TortoiseSVN client]
  * Note for Mac users: You have a choice of installing a graphical front-end such as [http://code.google.com/p/svnx/ Svnx] or using subversion from the command-line. The command-line tools are installed with Xcode and can be found in the following directory:
{{{
/Applications/Xcode.app/Contents/Developer/usr/bin
}}} 
  * Note for other users: See the [http://subversion.apache.org/packages.html subversion package download page] for more options
 * C++ Compiler
   * Linux users will probably already have g++ installed. If not, e.g. Ubuntu users can install it with
{{{
$ sudo apt-get install g++
}}}
   * Mac users can install [https://developer.apple.com/xcode/ Xcode] free from Apple's App Store. This includes gcc and Subversion. After installing Xcode you need to install the command-line tools - to do this open the preferences window in Xcode (start Xcode, open the Xcode menu and choose Preferences). Then click the Downloads tab and click the install button next to the `Command Line Tools` in the Components list.
   * For windows users, [http://www.microsoft.com/visualstudio/en-us/products/2010-editions/visual-cpp-express Visual C++ Express] is available free from Microsoft and includes C++ compilers.
 * [http://www.cmake.org/ CMake] (Gerardus requires version >= 2.8.8)
  # Download and install CMake for your system (Linux, Windows, MacOS X, etc). 
  * Note for Linux users: CMake is probably packaged for your distribution. Ubuntu packages CMake 2.8.6 in Precise Pangolin (12.04), so it's necessary to install cmake 2.8.9 from the upcoming Quantal Quetzal (12.10). This can be done by replacing `precise` by `quantal` in `/etc/apt/sources.list`, then running
{{{
$ sudo apt-get update
$ sudo apt-get install cmake
}}}
   Then undo the edit and run again
{{{
$ sudo apt-get update
}}}
  * Note for Windows users: Download and run the Win32 Installer from the [http://www.cmake.org/cmake/resources/software.html CMake downloads page]
  * Note for Mac users: Download and run the Mac OSX 64/32-bit Universal Installer from the [http://www.cmake.org/cmake/resources/software.html CMake downloads page]
  * Note for other users: See the [http://www.cmake.org/cmake/resources/software.html CMake resources page] for more options
 * [http://www.gnu.org/software/m4/ m4] (GNU M4 is an implementation of the traditional Unix macro processor)
  # It's a small program, simply download and install it
   * Note for Linux users: In Ubuntu, it can be easily installed doing
{{{
$ sudo apt-get install m4
}}}
 * [http://www.itk.org/itkindex.html Insight Toolkit] (Gerardus tested with version 4.3.1)
  # [http://www.itk.org/ITK/resources/software.html Download the Insight Toolkit (ITK)]
  # Build and install ITK using CMake (see the [http://www.itk.org/ItkSoftwareGuide.pdf ITK Software Guide] for details)
  * Note for MacOS X users: [http://worldwidepenguin.com/2010/05/how-to-install-itk-on-a-mac-cmake-macports/ this site] has instructions for building ITK using the CMake application (although they forget to mention that you click "Generate" at the end)
  * Note for everyone: You need to set the following variables in your CMake build of ITK
{{{
CMAKE_BUILD_TYPE   Release (this one ignored by Windows)
BUILD_SHARED_LIBS  ON
ITK_USE_REVIEW     ON
ITK_LEGACY_REMOVE  ON
}}}
  * Note for everyone: You can also untick the following variables to save time, as Gerardus does not need the ITK examples, documentation or tests
{{{
BUILD_DOCUMENTATION   OFF
BUILD_EXAMPLES        OFF
BUILD_TESTING         OFF
}}}
  * Note for everyone: ITK needs to be compiled with the same version of the compiler used for Matlab. This can be ensured setting the following CMake variables (e.g. [http://www.mathworks.com/support/compilers/R2012a Matlab2012a for Linux requires gcc 4.4])
{{{
CMAKE_C_COMPILER gcc-4.4
CMAKE_CXX_COMPILER g++-4.4
}}}
   * Linux and MacOSX users can do this with flags when running cmake, e.g.
{{{
$ cmake -DBUILD_SHARED_LIBS=ON -DITK_USE_REVIEW=ON \
-DCMAKE_BUILD_TYPE=Release -DITK_LEGACY_REMOVE=ON \
-DCMAKE_C_COMPILER=/usr/bin/gcc-4.4 \
-DCMAKE_CXX_COMPILER=/usr/bin/g++-4.4  ..
}}}
   * Windows users can do this checking the "Advanced" box in the CMake interface, and then checking the `ITK_USE_REVIEW` and `ITK_LEGACY_REMOVE`. If using Visual Studio, then the `CMAKE_BUILD_TYPE` entry will be ignored anyway, because Visual Studio is a multi-configuration sytem
  * Notes for Windows users:
   * You need to run Visual Studio as Administrator to install ITK
   * The ITK folder must be close to the root directory C:/>, because sometimes ITK gives compilation problems in Windows if the paths to files are very long strings
   * It's important to select "Release" instead of "Debug" from the pull-down configuration menu above the Solution Explorer. This will enable to build and install the Release version of ITK, which will then be needed by the Release build of Gerardus
   * Click on "Start" -> "My computer" -> "View system information", and in the "Advanced" tab click on "Environment Variables". Select the System variable `Path`, and click "Edit". Add the path to the `ITKCOMMON.DLL` library, e.g. "C:\Program Files\ITK\bin"
 * [http://www.mathworks.com/products/matlab/ Matlab]
  # Matlab has its own installer for each operating system (Linux, Windows, MacOS X, etc)
  * Note for Linux / MacOS X users: Ensure the matlab binary is in the system path. For example, you can add a symlink from a directory already in the path. Assuming your `matlab` binary is in `/opt/matlab/bin/`, then
{{{
$ cd /usr/local/sbin
$ sudo link -s /opt/matlab/bin/matlab
}}}
  * Note for Windows users: Similarly to the previous step, add to the `Path` environment variable the path to your Matlab `LIBMEX.DLL` and `LIBMX.DLL` libraries, e.g. "C:\Program Files\MATLAB\R2010b\bin\win32" (32 bit) or "C:\Program Files\MATLAB\R2010b\bin\win64" (64 bit)
 * [http://code.google.com/p/gerardus/ Gerardus]
  # Check out the Gerardus project code
  * Note for Linux and Mac users: If you are not going to commit any code back, you can check out the latest version of the code from the command line doing
{{{
$ svn co http://gerardus.googlecode.com/svn/trunk/ gerardus
}}}
    If you are going to commit code, then you will need to use `https` instead of `http`
{{{
$ svn co https://gerardus.googlecode.com/svn/trunk/ gerardus
}}}
  * Note for Windows and Mac users: If you are using a graphic interface like TortoiseSVN, choose "Checkout" from the menu options, and enter `https://gerardus.googlecode.com/svn/trunk/` (commiters) or `http://gerardus.googlecode.com/svn/trunk/` (read only) as the repository's URL. Name the destination folder `gerardus`

= Build and install Gerardus =

== Instructions for Linux and Mac users ==

 # Run from the command line the following code. If everything works, this will create and install the corresponding MEX files to directory `gerardus/matlab/ItkToolkit` with an extension appropriate to the architecture, e.g.
  * `itk_pstransform.mexa64`, `itk_imfilter.mexa64` (Linux 64-bit)
  * `itk_pstransform.mexw32`, `itk_imfilter.mexw32` (Windows 32-bit)
  * `itk_pstransform.mexmac`, `itk_imfilter.mexmaci` (Mac 32-bit Intel)
  * `itk_pstransform.mexmaci64`, `itk_imfilter.mexmaci64` (Mac 64-bit Intel)
{{{
$ cd gerardus
$ mkdir bin
$ cd bin
$ cmake ..      # in the first run, this will only configure Boost
$ make          # in the first run, this will only install Boost
$ cmake ..      # configure the rest of Gerardus
$ make          # build the rest of Gerardus
$ make install  # install the libraries and MEX files in Gerardus
}}}
 # Open Matlab and add all the toolboxes in `gerardus/matlab/*` to the Matlab path

== Instructions for Windows users ==

 # Open file `gerardus\CMakeLists.txt` with your CMake program
 # Click on the "Configure" button. Specify the generator for this project (the one we have tested is "Visual Studio 10" with "Use default native compilers"). In the first run, this will only configure the Boost libraries
 # Click on the "Generate" button
 # Open file `gerardus\bin\GERARDUS_MATLAB.sln` with your development environment (e.g. Visual Studio 10)
 # Select "Release" from the configuration pull-down menu above the Solution Explorer, instead of "Debug"
 # Select "Build -> Build Solution" from the menu. This will build and install the Boost libraries required by Gerardus locally
 # Close Visual Studio and go back to the CMake GUI
 # Click again on "Configure". This will now configure the rest of the Gerardus project
 # Click on "Generate" again
 # Open again file `gerardus\bin\GERARDUS_MATLAB.sln` with your development environment (e.g. Visual Studio 10)
 # In the "Solution Explorer", right click on "INSTALL" and select "Build". This will build and install the libraries and MEX files

= Notes on MEX functions provided by Gerardus =

Gerardus contains Matlab function that can be run directly without building any code. There are also C++ programs and C++ MEX files that need to be compiled and installed before they can be run. These instructions explain how to that.

After building and installing Gerardus, you should have the command line programs and Matlab MEX functions listed below.

Command line programs (file names given following the linux convention. In Windows, executables have the extension `.exe`):

 * `gerardus/programs/`
  * `extractVoxelCoordinatesFromSegmentationMask`
  * `padSegmentationMaskWithVoxels`
  * `resize3DImage`
  * `rigidRegistration2D`
  * `rotate3DImage`
  * `skeletonize3DSegmentation`
  * `vesselness3DImage`

Matlab MEX functions (file names given following the linux 64 bit convention. In linux 32 bit, Windows 32/64 bit and Mac 32/64 bit the extension is different):

 * `gerardus/matlab/`
  * `PointsToolbox/sparse_breakdown.mexa64`
  * `PointsToolbox/mba_surface_interpolation.mexa64`
  * `ItkToolbox/itk_imfilter.mexa64`
  * `ItkToolbox/itk_registration.mexa64`
  * `ItkToolbox/itk_pstransform.mexa64`
  * `ThirdPartyToolbox/dijkstra.mexa64`
  * `FiltersToolbox/bwregiongrow.mexa64`
  * `FiltersToolbox/im2dmatrix.mexa64`
  * `CgalToolbox/cgal_insurftri.mexa64`
  * `CgalToolbox/cgal_closest_trifacet.mexa64`